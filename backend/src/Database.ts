//Source code generated by AppGPT (www.appgpt.tech)

//Class to create tables and seed new database
import { DataSource } from 'typeorm';
import { DBConfiguration } from './Configuration';
import { SettingsEntity } from './db/Settings.entity';
//autogenerate imports based on resources
import { PatientsEntity } from './db/Patients.entity';
import { AssessmentsEntity } from './db/Assessments.entity';
import { MeasurementsEntity } from './db/Measurements.entity';
import { NotesEntity } from './db/Notes.entity';
import { ExercisesEntity } from './db/Exercises.entity';

export class Database {
  static dbConfiguration: DBConfiguration;
  public static ds: DataSource;

  static async Initialize(dbConfiguration: DBConfiguration) {
    Database.dbConfiguration = dbConfiguration;
    let dbConfig: any = dbConfiguration as any;
    //Autogenerate entities array from resource names

    dbConfig.entities = [
      SettingsEntity,
      PatientsEntity,
      AssessmentsEntity,
      MeasurementsEntity,
      NotesEntity,
      ExercisesEntity,
    ];
    Database.ds = new DataSource(dbConfig);
    await Database.ds.initialize();

    //TODO: Drop all tables

    await Database.Seed();
  }
  static async Seed() {
    let data: any = {
      Patients: [
        {
          name: 'name 1',
          age: 1,
          sex: 'sex 1',
          occupation: 'occupation 1',
          natureOfWork: 'natureOfWork 1',
          complianceHistory: 'complianceHistory 1',
          id: 15,
        },
        {
          name: 'name 2',
          age: 2,
          sex: 'sex 2',
          occupation: 'occupation 2',
          natureOfWork: 'natureOfWork 2',
          complianceHistory: 'complianceHistory 2',
          id: 86,
        },
        {
          name: 'name 3',
          age: 3,
          sex: 'sex 3',
          occupation: 'occupation 3',
          natureOfWork: 'natureOfWork 3',
          complianceHistory: 'complianceHistory 3',
          id: 100,
        },
        {
          name: 'name 4',
          age: 4,
          sex: 'sex 4',
          occupation: 'occupation 4',
          natureOfWork: 'natureOfWork 4',
          complianceHistory: 'complianceHistory 4',
          id: 4,
        },
        {
          name: 'name 5',
          age: 5,
          sex: 'sex 5',
          occupation: 'occupation 5',
          natureOfWork: 'natureOfWork 5',
          complianceHistory: 'complianceHistory 5',
          id: 3,
        },
      ],
      Assessments: [
        {
          bodyChartFront: 'bodyChartFront 1',
          bodyChartLeftSide: 'bodyChartLeftSide 1',
          bodyChartRightSide: 'bodyChartRightSide 1',
          bodyChartBack: 'bodyChartBack 1',
          adjustmentAngles: 0.56,
          id: 60,
        },
        {
          bodyChartFront: 'bodyChartFront 2',
          bodyChartLeftSide: 'bodyChartLeftSide 2',
          bodyChartRightSide: 'bodyChartRightSide 2',
          bodyChartBack: 'bodyChartBack 2',
          adjustmentAngles: 0.78,
          id: 40,
        },
        {
          bodyChartFront: 'bodyChartFront 3',
          bodyChartLeftSide: 'bodyChartLeftSide 3',
          bodyChartRightSide: 'bodyChartRightSide 3',
          bodyChartBack: 'bodyChartBack 3',
          adjustmentAngles: 0.87,
          id: 70,
        },
        {
          bodyChartFront: 'bodyChartFront 4',
          bodyChartLeftSide: 'bodyChartLeftSide 4',
          bodyChartRightSide: 'bodyChartRightSide 4',
          bodyChartBack: 'bodyChartBack 4',
          adjustmentAngles: 0.84,
          id: 98,
        },
        {
          bodyChartFront: 'bodyChartFront 5',
          bodyChartLeftSide: 'bodyChartLeftSide 5',
          bodyChartRightSide: 'bodyChartRightSide 5',
          bodyChartBack: 'bodyChartBack 5',
          adjustmentAngles: 0.05,
          id: 93,
        },
      ],
      Measurements: [
        { degrees: 0.57, centimeters: 0.71, id: 24 },
        { degrees: 0.2, centimeters: 0.26, id: 40 },
        { degrees: 0.21, centimeters: 0.79, id: 73 },
        { degrees: 0.43, centimeters: 0.44, id: 17 },
        { degrees: 1, centimeters: 0.11, id: 45 },
      ],
      Notes: [
        {
          upperLimb: 'upperLimb 1',
          spine: 'spine 1',
          lowerLimb: 'lowerLimb 1',
          id: 29,
        },
        {
          upperLimb: 'upperLimb 2',
          spine: 'spine 2',
          lowerLimb: 'lowerLimb 2',
          id: 29,
        },
        {
          upperLimb: 'upperLimb 3',
          spine: 'spine 3',
          lowerLimb: 'lowerLimb 3',
          id: 41,
        },
        {
          upperLimb: 'upperLimb 4',
          spine: 'spine 4',
          lowerLimb: 'lowerLimb 4',
          id: 72,
        },
        {
          upperLimb: 'upperLimb 5',
          spine: 'spine 5',
          lowerLimb: 'lowerLimb 5',
          id: 88,
        },
      ],
      Exercises: [
        { column1: 'column1 1', column2: 'column2 1', id: 99 },
        { column1: 'column1 2', column2: 'column2 2', id: 54 },
        { column1: 'column1 3', column2: 'column2 3', id: 85 },
        { column1: 'column1 4', column2: 'column2 4', id: 5 },
        { column1: 'column1 5', column2: 'column2 5', id: 75 },
      ],
    };
    //Autogenerate multiple such calls ie for each resource and its data object
    let isSeeded = await this.IsSeeded();
    //if (!isSeeded) {
    //forcing app recreation
    if (true) {
      console.log('   Seeding database...');
      await this.SeedResource('PatientsEntity', data.Patients);
      await this.SeedResource('AssessmentsEntity', data.Assessments);
      await this.SeedResource('MeasurementsEntity', data.Measurements);
      await this.SeedResource('NotesEntity', data.Notes);
      await this.SeedResource('ExercisesEntity', data.Exercises);
      await this.SeedResource('SettingsEntity', {
        settingname: 'isSeeded',
        settingvalue: 'true',
      });
    } else {
      console.log('   Database seeded already!');
    }
  }
  static async IsSeeded() {
    const repo = Database.ds.getRepository('SettingsEntity');
    let rec: any = await repo.findOne({
      select: {
        settingname: true,
        settingvalue: true,
      },
      where: {
        settingname: 'isSeeded',
      },
    });
    if (rec && rec.settingvalue) return true;
    return false;
  }
  static async SeedResource(resourceName: any, resourceData: any) {
    const repo = Database.ds.getRepository(resourceName);
    //await repo.clear();
    console.log('   Seeding table ' + resourceName);
    await repo.upsert(resourceData, ['id']);
  }
}
